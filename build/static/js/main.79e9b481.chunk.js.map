{"version":3,"sources":["logo.svg","ExcelExport/ExcelExport.js","App.js","reportWebVitals.js","index.js"],"names":["data","name","numberOne","numberTwo","ExcelExport","useState","spread","setSpread","isLoading","setIsLoading","importFile","a","imporFiletAsync","excelFile","spreadExcel","open","json","fromJSON","e","console","log","fetch","file","arrayBuffer","blobFile","exportFile","excelIO","fileName","substr","JSON","stringify","toJSON","includeBindingSource","save","blob","saveAs","addData","sheet","sheets","tables","addFromDataSource","tableStyle","GC","Spread","Sheets","Tables","TableThemes","light1","findByName","style","generatesFile","setTimeout","type","id","value","onClick","disabled","workbookInitialized","spreadInstance","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAAe,I,iGCOTA,EAAO,CACX,CACEC,KAAM,IACNC,UAAW,KACXC,UAAW,KAEb,CACEF,KAAM,IACNC,UAAW,KACXC,UAAW,KAEb,CACEF,KAAM,IACNC,UAAW,KACXC,UAAW,KAEb,CACEF,KAAM,IACNC,UAAW,IACXC,UAAW,KAEb,CACEF,KAAM,IACNC,UAAW,IACXC,UAAW,KAEb,CACEF,KAAM,IACNC,UAAW,IACXC,UAAW,KAEb,CACEF,KAAM,IACNC,UAAW,KACXC,UAAW,MAEb,CACEF,KAAM,IACNC,UAAW,IACXC,UAAW,KAEb,CACEF,KAAM,IACNC,UAAW,IACXC,UAAW,KAEb,CACEF,KAAM,IACNC,UAAW,IACXC,UAAW,KAEb,CACEF,KAAM,IACNC,UAAW,KACXC,UAAW,OAsFAC,EAlFK,WAClB,MAA4BC,mBAAS,MAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAMMC,EAAU,uCAAG,4BAAAC,EAAA,6DACjBC,IADiB,SAEOA,IAFP,OAEXC,EAFW,QAGD,IAAIC,MACZC,KACNF,GACA,SAACG,GACCV,EAAOW,SAASD,MAElB,SAACE,GACCC,QAAQC,IAAIF,MAVC,2CAAH,qDAeVN,EAAe,uCAAG,8BAAAD,EAAA,sEACHU,MAAM,sBADH,cAChBC,EADgB,gBAECA,EAAKC,cAFN,cAEhBC,EAFgB,yBAGfA,GAHe,2CAAH,qDAMfC,EAAa,WACjB,IAAMC,EAAU,IAAIZ,KAChBa,EAAW,QACgB,UAA3BA,EAASC,QAAQ,EAAG,KACtBD,GAAY,SAGd,IAAMX,EAAOa,KAAKC,UAAUxB,EAAOyB,OAAO,CAAEC,sBAAsB,KAClEN,EAAQO,KACNjB,GACA,SAACkB,GACCC,IAAOD,EAAMP,MAEf,SAACT,GACCC,QAAQC,IAAIF,OAKZkB,EAAU,WACd,IAAMC,EAAQ/B,EAAOgC,OAAO,GAC5BD,EAAME,OAAOC,kBAAkB,SAAU,EAAG,EAAGxC,GAC/C,IAAMyC,EAAaC,IAAGC,OAAOC,OAAOC,OAAOC,YAAYC,OACtCV,EAAME,OAAOS,WAAW,UAChCC,MAAMR,IAGXS,EAAa,uCAAG,sBAAAvC,EAAA,6DACpBF,GAAa,GADO,SAEdC,IAFc,OAGpByC,YAAW,WACTf,IACAX,IACAhB,GAAa,KACZ,KAPiB,2CAAH,qDAUnB,OACE,gCACE,uBACE2C,KAAK,SACLC,GAAG,YACHC,MAAM,SACNC,QAASL,EACTM,SAAUhD,IAEZ,cAAC,eAAD,CAAciD,oBAvEG,SAACC,GACpBnD,EAAUmD,IAsER,SACE,cAAC,YAAD,UCjIOC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.79e9b481.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from \"react\";\nimport GC from \"@grapecity/spread-sheets\";\nimport { SpreadSheets, Worksheet } from \"@grapecity/spread-sheets-react\";\nimport \"@grapecity/spread-sheets-charts\";\nimport * as spreadExcel from \"@grapecity/spread-excelio\";\nimport saveAs from \"file-saver\";\n\nconst data = [\n  {\n    name: \"A\",\n    numberOne: 42000,\n    numberTwo: 8000\n  },\n  {\n    name: \"B\",\n    numberOne: 49000,\n    numberTwo: 1000\n  },\n  {\n    name: \"C\",\n    numberOne: 49000,\n    numberTwo: 1000\n  },\n  {\n    name: \"D\",\n    numberOne: 40000,\n    numberTwo: 10000\n  },\n  {\n    name: \"E\",\n    numberOne: 30000,\n    numberTwo: 20000\n  },\n  {\n    name: \"F\",\n    numberOne: 30000,\n    numberTwo: 20000\n  },\n  {\n    name: \"G\",\n    numberOne: 25000,\n    numberTwo: 25000\n  },\n  {\n    name: \"H\",\n    numberOne: 10000,\n    numberTwo: 40000\n  },\n  {\n    name: \"I\",\n    numberOne: 3000,\n    numberTwo: 7000\n  },\n  {\n    name: \"J\",\n    numberOne: 2000,\n    numberTwo: 8000\n  },\n  {\n    name: \"K\",\n    numberOne: 25000,\n    numberTwo: 25000\n  }\n];\n\nconst ExcelExport = () => {\n  const [spread, setSpread] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const workbookInit = (spreadInstance) => {\n    setSpread(spreadInstance);\n  };\n\n  const importFile = async () => {\n    imporFiletAsync();\n    const excelFile = await imporFiletAsync();\n    const excelIO = new spreadExcel.IO();\n    excelIO.open(\n      excelFile,\n      (json) => {\n        spread.fromJSON(json);\n      },\n      (e) => {\n        console.log(e);\n      }\n    );\n  };\n\n  const imporFiletAsync = async () => {\n    const file = await fetch(\"/static/excel.xlsx\");\n    const blobFile = await file.arrayBuffer();\n    return blobFile;\n  };\n\n  const exportFile = () => {\n    const excelIO = new spreadExcel.IO();\n    let fileName = \"Excel\";\n    if (fileName.substr(-5, 5) !== \".xlsx\") {\n      fileName += \".xlsx\";\n    }\n\n    const json = JSON.stringify(spread.toJSON({ includeBindingSource: true }));\n    excelIO.save(\n      json,\n      (blob) => {\n        saveAs(blob, fileName);\n      },\n      (e) => {\n        console.log(e);\n      }\n    );\n  };\n\n  const addData = () => {\n    const sheet = spread.sheets[3];\n    sheet.tables.addFromDataSource(\"table1\", 0, 0, data);\n    const tableStyle = GC.Spread.Sheets.Tables.TableThemes.light1;\n    const theTable = sheet.tables.findByName(\"table1\");\n    theTable.style(tableStyle);\n  };\n\n  const generatesFile = async () => {\n    setIsLoading(true);\n    await importFile();\n    setTimeout(() => {\n      addData();\n      exportFile();\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  return (\n    <div>\n      <input\n        type=\"button\"\n        id=\"loadExcel\"\n        value=\"Export\"\n        onClick={generatesFile}\n        disabled={isLoading}\n      />\n      <SpreadSheets workbookInitialized={workbookInit}>\n        <Worksheet />\n      </SpreadSheets>\n    </div>\n  );\n};\n\nexport default ExcelExport;\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport ExcelExport from \"./ExcelExport\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ExcelExport />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}